<?xml version="1.0" encoding="UTF-8" ?>
<ChoregrapheProject xmlns="http://www.aldebaran-robotics.com/schema/choregraphe/project.xsd" xar_version="3">
    <Box name="root" id="-1" localization="8" tooltip="Root box of Choregraphe&apos;s behavior. Highest level possible." x="0" y="0">
        <bitmap>media/images/box/root.png</bitmap>
        <script language="4">
            <content>
                <![CDATA[]]>
</content>
        </script>
        <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
        <Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this input." id="2" />
        <Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this input." id="3" />
        <Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="Signal sent when box behavior is finished." id="4" />
        <Timeline enable="0">
            <BehaviorLayer name="behavior_layer1">
                <BehaviorKeyframe name="keyframe1" index="1">
                    <Diagram>
                        <Box name="Timeline" id="3" localization="8" tooltip="This box is empty (contains a single motion layer with no motor position&#x0A;defined in it) and should be used to create any animation you would like." x="598" y="418">
                            <bitmap>media/images/box/movement/move.png</bitmap>
                            <script language="4">
                                <content>
                                    <![CDATA[]]>
</content>
                            </script>
                            <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                            <Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this input." id="2" />
                            <Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this input." id="3" />
                            <Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="Signal sent when box behavior is finished." id="4" />
                            <Timeline enable="1" fps="0" start_frame="3" end_frame="62" size="62">
                                <BehaviorLayer name="behavior_layer1">
                                    <BehaviorKeyframe name="keyframe1" index="1">
                                        <Diagram scale="84.0896">
                                            <Box name="Goto (number)" id="1" localization="8" tooltip="Jump to the frame number set in parameters." x="668" y="298">
                                                <bitmap>media/images/box/box-timeLine.png</bitmap>
                                                <script language="4">
                                                    <content>
                                                        <![CDATA[class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self, False)

    def onInput_onGo(self):
        self.getParentTimeline().goTo(self.getParameter("Frame number"))]]>
</content>
                                                </script>
                                                <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                                                <Input name="onGo" type="1" type_size="1" nature="1" inner="0" tooltip="Parent timeline gotoTimeline when a signal is received on this input." id="2" />
                                                <Parameter name="Frame number" inherits_from_parent="0" content_type="1" value="15" default_value="1" min="0" max="10000" tooltip="Number of the frame you want to go to." id="3" />
                                            </Box>
                                            <Box name="Goto (number) (1)" id="2" localization="8" tooltip="Jump to the frame number set in parameters." x="933" y="319">
                                                <bitmap>media/images/box/box-timeLine.png</bitmap>
                                                <script language="4">
                                                    <content>
                                                        <![CDATA[class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self, False)

    def onInput_onGo(self):
        self.getParentTimeline().goTo(self.getParameter("Frame number"))]]>
</content>
                                                </script>
                                                <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                                                <Input name="onGo" type="1" type_size="1" nature="1" inner="0" tooltip="Parent timeline gotoTimeline when a signal is received on this input." id="2" />
                                                <Parameter name="Frame number" inherits_from_parent="0" content_type="1" value="30" default_value="1" min="0" max="10000" tooltip="Number of the frame you want to go to." id="3" />
                                            </Box>
                                            <Box name="Goto (number) (2)" id="3" localization="8" tooltip="Jump to the frame number set in parameters." x="1180" y="369">
                                                <bitmap>media/images/box/box-timeLine.png</bitmap>
                                                <script language="4">
                                                    <content>
                                                        <![CDATA[class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self, False)

    def onInput_onGo(self):
        self.getParentTimeline().goTo(self.getParameter("Frame number"))]]>
</content>
                                                </script>
                                                <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                                                <Input name="onGo" type="1" type_size="1" nature="1" inner="0" tooltip="Parent timeline gotoTimeline when a signal is received on this input." id="2" />
                                                <Parameter name="Frame number" inherits_from_parent="0" content_type="1" value="45" default_value="1" min="0" max="10000" tooltip="Number of the frame you want to go to." id="3" />
                                            </Box>
                                            <Box name="Goto (number) (3)" id="7" localization="8" tooltip="Jump to the frame number set in parameters." x="1588" y="373">
                                                <bitmap>media/images/box/box-timeLine.png</bitmap>
                                                <script language="4">
                                                    <content>
                                                        <![CDATA[class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self, False)

    def onInput_onGo(self):
        self.getParentTimeline().goTo(self.getParameter("Frame number"))]]>
</content>
                                                </script>
                                                <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                                                <Input name="onGo" type="1" type_size="1" nature="1" inner="0" tooltip="Parent timeline gotoTimeline when a signal is received on this input." id="2" />
                                                <Parameter name="Frame number" inherits_from_parent="0" content_type="1" value="60" default_value="1" min="0" max="10000" tooltip="Number of the frame you want to go to." id="3" />
                                            </Box>
                                            <Box name="Delay" id="8" localization="8" tooltip="Wait a moment before triggering the output. &#x0A;Can be stopped anytime. &#x0A;Multiple inputs will trigger multiple outputs." x="519" y="59">
                                                <bitmap>media/images/box/wait.png</bitmap>
                                                <script language="4">
                                                    <content>
                                                        <![CDATA[class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self, False)
        self.bpm = None

    def onLoad(self):
        self.delayed = []

    def onUnload(self):
        self.cancelDelays()

    def cancelDelays(self):
        cancel_list = list(self.delayed)
        for d in cancel_list:
            d.cancel()

    def cleanDelay(self, fut, fut_ref):
        self.delayed.remove(fut)

    def triggerOutput(self):
        self.timerOutput()

    def onInput_onStart(self):
        import qi
        import functools
        delay_future = qi.async(self.triggerOutput, delay=int((30 / self.bpm) * 1000 * 1000))
        # keep the async operation in an array for cancel
        # and remove it when it is finished in the callback
        self.delayed.append(delay_future)
        bound_clean = functools.partial(self.cleanDelay, delay_future)
        delay_future.addCallback(bound_clean)

    def onInput_onStop(self):
        if self.getParameter("Trigger timerOutput if cancelled") and self.delayed:
            self.timerOutput()
        self.onUnload()

    def onInput_bpm(self, inBpm):
        self.bpm = inBpm]]>
</content>
                                                </script>
                                                <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                                                <Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Start the Delay box with the configured timeout value." id="2" />
                                                <Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Stop the wait and stimulate the output." id="3" />
                                                <Input name="bpm" type="2" type_size="1" nature="1" inner="0" tooltip="" id="4" />
                                                <Output name="timerOutput" type="1" type_size="1" nature="1" inner="0" tooltip="Send a bang once delay set in parameters is elapsed, or if the box is stopped and the appropriate parameter is set." id="5" />
                                                <Parameter name="Timeout (s)" inherits_from_parent="0" content_type="2" value="1" default_value="1" min="0" max="5000" tooltip="Duration the box waits before stimulating the output." id="6" />
                                                <Parameter name="Trigger timerOutput if cancelled" inherits_from_parent="0" content_type="0" value="0" default_value="1" tooltip="If the box is currently delaying at least one signal and cancelled, output will be stimulated." id="7" />
                                            </Box>
                                            <Box name="Delay (1)" id="4" localization="8" tooltip="Wait a moment before triggering the output. &#x0A;Can be stopped anytime. &#x0A;Multiple inputs will trigger multiple outputs." x="784" y="128">
                                                <bitmap>media/images/box/wait.png</bitmap>
                                                <script language="4">
                                                    <content>
                                                        <![CDATA[class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self, False)
        self.bpm = None

    def onLoad(self):
        self.delayed = []

    def onUnload(self):
        self.cancelDelays()

    def cancelDelays(self):
        cancel_list = list(self.delayed)
        for d in cancel_list:
            d.cancel()

    def cleanDelay(self, fut, fut_ref):
        self.delayed.remove(fut)

    def triggerOutput(self):
        self.timerOutput()

    def onInput_onStart(self):
        import qi
        import functools
        delay_future = qi.async(self.triggerOutput, delay=int((30 / self.bpm) * 1000 * 1000))
        # keep the async operation in an array for cancel
        # and remove it when it is finished in the callback
        self.delayed.append(delay_future)
        bound_clean = functools.partial(self.cleanDelay, delay_future)
        delay_future.addCallback(bound_clean)

    def onInput_onStop(self):
        if self.getParameter("Trigger timerOutput if cancelled") and self.delayed:
            self.timerOutput()
        self.onUnload()

    def onInput_bpm(self, inBpm):
        self.bpm = inBpm]]>
</content>
                                                </script>
                                                <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                                                <Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Start the Delay box with the configured timeout value." id="2" />
                                                <Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Stop the wait and stimulate the output." id="3" />
                                                <Input name="bpm" type="2" type_size="1" nature="1" inner="0" tooltip="" id="4" />
                                                <Output name="timerOutput" type="1" type_size="1" nature="1" inner="0" tooltip="Send a bang once delay set in parameters is elapsed, or if the box is stopped and the appropriate parameter is set." id="5" />
                                                <Parameter name="Timeout (s)" inherits_from_parent="0" content_type="2" value="1" default_value="1" min="0" max="5000" tooltip="Duration the box waits before stimulating the output." id="6" />
                                                <Parameter name="Trigger timerOutput if cancelled" inherits_from_parent="0" content_type="0" value="0" default_value="1" tooltip="If the box is currently delaying at least one signal and cancelled, output will be stimulated." id="7" />
                                            </Box>
                                            <Box name="Delay (2)" id="5" localization="8" tooltip="Wait a moment before triggering the output. &#x0A;Can be stopped anytime. &#x0A;Multiple inputs will trigger multiple outputs." x="1144" y="116">
                                                <bitmap>media/images/box/wait.png</bitmap>
                                                <script language="4">
                                                    <content>
                                                        <![CDATA[class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self, False)
        self.bpm = None

    def onLoad(self):
        self.delayed = []

    def onUnload(self):
        self.cancelDelays()

    def cancelDelays(self):
        cancel_list = list(self.delayed)
        for d in cancel_list:
            d.cancel()

    def cleanDelay(self, fut, fut_ref):
        self.delayed.remove(fut)

    def triggerOutput(self):
        self.timerOutput()

    def onInput_onStart(self):
        import qi
        import functools
        delay_future = qi.async(self.triggerOutput, delay=int((30 / self.bpm) * 1000 * 1000))
        # keep the async operation in an array for cancel
        # and remove it when it is finished in the callback
        self.delayed.append(delay_future)
        bound_clean = functools.partial(self.cleanDelay, delay_future)
        delay_future.addCallback(bound_clean)

    def onInput_onStop(self):
        if self.getParameter("Trigger timerOutput if cancelled") and self.delayed:
            self.timerOutput()
        self.onUnload()

    def onInput_bpm(self, inBpm):
        self.bpm = inBpm]]>
</content>
                                                </script>
                                                <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                                                <Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Start the Delay box with the configured timeout value." id="2" />
                                                <Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Stop the wait and stimulate the output." id="3" />
                                                <Input name="bpm" type="2" type_size="1" nature="1" inner="0" tooltip="" id="4" />
                                                <Output name="timerOutput" type="1" type_size="1" nature="1" inner="0" tooltip="Send a bang once delay set in parameters is elapsed, or if the box is stopped and the appropriate parameter is set." id="5" />
                                                <Parameter name="Timeout (s)" inherits_from_parent="0" content_type="2" value="1" default_value="1" min="0" max="5000" tooltip="Duration the box waits before stimulating the output." id="6" />
                                                <Parameter name="Trigger timerOutput if cancelled" inherits_from_parent="0" content_type="0" value="0" default_value="1" tooltip="If the box is currently delaying at least one signal and cancelled, output will be stimulated." id="7" />
                                            </Box>
                                            <Box name="Delay (3)" id="6" localization="8" tooltip="Wait a moment before triggering the output. &#x0A;Can be stopped anytime. &#x0A;Multiple inputs will trigger multiple outputs." x="1444" y="51">
                                                <bitmap>media/images/box/wait.png</bitmap>
                                                <script language="4">
                                                    <content>
                                                        <![CDATA[class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self, False)
        self.bpm = None

    def onLoad(self):
        self.delayed = []

    def onUnload(self):
        self.cancelDelays()

    def cancelDelays(self):
        cancel_list = list(self.delayed)
        for d in cancel_list:
            d.cancel()

    def cleanDelay(self, fut, fut_ref):
        self.delayed.remove(fut)

    def triggerOutput(self):
        self.timerOutput()

    def onInput_onStart(self):
        import qi
        import functools
        delay_future = qi.async(self.triggerOutput, delay=int((30 / self.bpm) * 1000 * 1000))
        # keep the async operation in an array for cancel
        # and remove it when it is finished in the callback
        self.delayed.append(delay_future)
        bound_clean = functools.partial(self.cleanDelay, delay_future)
        delay_future.addCallback(bound_clean)

    def onInput_onStop(self):
        if self.getParameter("Trigger timerOutput if cancelled") and self.delayed:
            self.timerOutput()
        self.onUnload()

    def onInput_bpm(self, inBpm):
        self.bpm = inBpm]]>
</content>
                                                </script>
                                                <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                                                <Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Start the Delay box with the configured timeout value." id="2" />
                                                <Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Stop the wait and stimulate the output." id="3" />
                                                <Input name="bpm" type="2" type_size="1" nature="1" inner="0" tooltip="" id="4" />
                                                <Output name="timerOutput" type="1" type_size="1" nature="1" inner="0" tooltip="Send a bang once delay set in parameters is elapsed, or if the box is stopped and the appropriate parameter is set." id="5" />
                                                <Parameter name="Timeout (s)" inherits_from_parent="0" content_type="2" value="1" default_value="1" min="0" max="5000" tooltip="Duration the box waits before stimulating the output." id="6" />
                                                <Parameter name="Trigger timerOutput if cancelled" inherits_from_parent="0" content_type="0" value="0" default_value="1" tooltip="If the box is currently delaying at least one signal and cancelled, output will be stimulated." id="7" />
                                            </Box>
                                            <Box name="Wait For Signals" id="9" localization="8" tooltip="Wait for both inputs to be stimulated before stimulating its output." x="216" y="75">
                                                <bitmap>media/images/box/wait.png</bitmap>
                                                <script language="4">
                                                    <content>
                                                        <![CDATA[class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self, False)

    def onLoad(self):
        self.ok = [False]*2

    def onUnload(self):
        #puts code for box cleanup here
        ""

    def onStart(self, nInput):
        self.ok[nInput-1] = True
        bOutput = True
        for bOk in self.ok:
            bOutput = bOutput and bOk
        if( bOutput ):
            self.ok = [False]*2
            self.signalsReceived()

    def onInput_signal1(self):
        self.onStart(1)

    def onInput_signal2(self):
        self.onStart(2)]]>
</content>
                                                </script>
                                                <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when Diagram is loaded." id="1" />
                                                <Input name="signal1" type="1" type_size="1" nature="1" inner="0" tooltip="First signal to wait." id="2" />
                                                <Input name="signal2" type="1" type_size="1" nature="1" inner="0" tooltip="Second signal to wait." id="3" />
                                                <Output name="signalsReceived" type="1" type_size="1" nature="2" inner="0" tooltip="Signal sent when both inputs have been stimulated." id="4" />
                                            </Box>
                                            <Box name="Random Int." id="10" localization="8" tooltip="Generate a random integer between a min number and a max number set as&#x0A;parameters.&#x0A;Note that the min and max numbers are included in the range of possible values." x="195" y="432">
                                                <bitmap>media/images/box/box-script.png</bitmap>
                                                <script language="4">
                                                    <content>
                                                        <![CDATA[import random

class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self, False)

    def onLoad(self):
        # attributes needed in shuffle mode
        self.nMax = 1
        self.nMin = 0
        self.nIndex = self.nMax - self.nMin
        self.aShuffled = []

    def onUnload(self):
         #puts code for box cleanup here
        pass

    def onInput_onStart(self):
        nMax = self.getParameter("Max value")
        nMin = self.getParameter("Min value")
        if( nMin > nMax ):
            temp = nMin
            nMin = nMax
            nMax = temp
        # if shuffle
        if( self.getParameter("Shuffle") ):
            self.nIndex += 1
            if( self.nIndex > self.nMax - self.nMin or nMax != self.nMax or nMin != self.nMin ):
                self.nMax = nMax
                self.nMin = nMin
                self.nIndex = 0
                self.aShuffled = []
                for i in range( nMin, nMax + 1 ):
                    self.aShuffled.insert( random.randint(0, len(self.aShuffled)), i )
            self.output_RandomValue( self.aShuffled[self.nIndex] )
        # if not shuffle
        else:
            self.nIndex = self.nMax - self.nMin
            self.output_RandomValue( random.randint( nMin, nMax ) )]]>
</content>
                                                </script>
                                                <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                                                <Input name="onStart" type="1" type_size="1" nature="1" inner="0" tooltip="Generate a random integer." id="2" />
                                                <Output name="output_RandomValue" type="2" type_size="1" nature="2" inner="0" tooltip="The random value obtained." id="3" />
                                                <Parameter name="Min value" inherits_from_parent="0" content_type="1" value="120" default_value="0" min="0" max="1000" tooltip="The minimum value you can get." id="4" />
                                                <Parameter name="Max value" inherits_from_parent="0" content_type="1" value="120" default_value="10" min="0" max="1000" tooltip="The maximum number you can get." id="5" />
                                                <Parameter name="Shuffle" inherits_from_parent="0" content_type="0" value="0" default_value="0" tooltip="When this option is selected the box will give all the numbers between min and&#x0A;max before giving the same number twice." id="6" />
                                            </Box>
                                            <Box name="Counter" id="11" localization="-1" tooltip="Represent a counter.&#x0A;&#x0A;Each time the onStart input is stimulated, the counter value is sent on the&#x0A;currentValue output and incremented (or decremented) by Step value, from&#x0A;its Initial value to its Final value set in the parameters. Once the counter value is&#x0A;higher than its Final value, the onReinitialized output is stimulated and&#x0A;the counter is reinitialized to the Initial value.&#x0A;&#x0A;Note: You can also reinitialize the counter by stimulating the onInit&#x0A;input." x="923" y="632">
                                                <bitmap>media/images/box/loop.png</bitmap>
                                                <script language="4">
                                                    <content>
                                                        <![CDATA[class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self, False)

    def onLoad(self):
        self.initializeParameters()
        if( self.getParameter("Final value") - self.getParameter("Initial value") >= 0 ):
            self.stepSign = +1
        else:
            self.stepSign = -1

    def onUnload(self):
        #~ puts code for box cleanup here
        pass

    def onInput_onNext(self):
        bParamChanged = ( self.nLast != self.getParameter("Final value") or self.nFirst != self.getParameter("Initial value") )
        bEnd = ( self.stepSign * self.nCounter > self.stepSign * self.nLast )
        if( bEnd or bParamChanged ):
            self.onInput_onInit()
        if( not bEnd or bParamChanged ):
            currentCounter = self.nCounter
            self.nCounter = self.nCounter + self.stepSign * self.getParameter("Step value")
            self.currentValue( currentCounter )

    def initializeParameters(self):
        self.nFirst = self.getParameter("Initial value")
        self.nCounter = self.nFirst
        self.nLast = self.getParameter("Final value")

    def onInput_onInit(self):
        self.initializeParameters()
        self.onReinitialized()]]>
</content>
                                                </script>
                                                <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when Diagram is loaded." id="1" />
                                                <Input name="onNext" type="1" type_size="1" nature="1" inner="0" tooltip="The counter next value is sent on the currentValue output when a signal is&#x0A;received on this input, unless it reached its Final value, then the onReinitialized&#x0A;output is stimulated." id="2" />
                                                <Input name="onInit" type="1" type_size="1" nature="1" inner="0" tooltip="When a signal is received on this input, the counter is reinitialized to its Initial&#x0A;value." id="3" />
                                                <Output name="currentValue" type="2" type_size="1" nature="2" inner="0" tooltip="Stimulated for each interaction with the counter current value." id="4" />
                                                <Output name="onReinitialized" type="1" type_size="1" nature="2" inner="0" tooltip="Stimulated when the loop is over or if the counter has been reinitialized." id="5" />
                                                <Parameter name="Initial value" inherits_from_parent="0" content_type="1" value="0" default_value="0" min="0" max="500" tooltip="The initial value of the counter (for the first iteration)." id="6" />
                                                <Parameter name="Step value" inherits_from_parent="0" content_type="1" value="1" default_value="1" min="1" max="500" tooltip="The counter value will be incremented or decremented with this value." id="7" />
                                                <Parameter name="Final value" inherits_from_parent="0" content_type="1" value="0" default_value="5" min="0" max="500" tooltip="It is the maximum (if increasing) or the minimum (if decreasing) value of the&#x0A;counter (thus for the last iteration).&#x0A;&#x0A;After this value, if the onStart input is called, the onReinitialized output will be&#x0A;stimulated and the counter will be reinitialized to its Initial value." id="8" />
                                            </Box>
                                            <Link inputowner="1" indexofinput="2" outputowner="8" indexofoutput="5" />
                                            <Link inputowner="4" indexofinput="2" outputowner="8" indexofoutput="5" />
                                            <Link inputowner="2" indexofinput="2" outputowner="4" indexofoutput="5" />
                                            <Link inputowner="5" indexofinput="2" outputowner="4" indexofoutput="5" />
                                            <Link inputowner="3" indexofinput="2" outputowner="5" indexofoutput="5" />
                                            <Link inputowner="6" indexofinput="2" outputowner="5" indexofoutput="5" />
                                            <Link inputowner="7" indexofinput="2" outputowner="6" indexofoutput="5" />
                                            <Link inputowner="9" indexofinput="3" outputowner="10" indexofoutput="3" />
                                            <Link inputowner="8" indexofinput="4" outputowner="10" indexofoutput="3" />
                                            <Link inputowner="4" indexofinput="4" outputowner="10" indexofoutput="3" />
                                            <Link inputowner="5" indexofinput="4" outputowner="10" indexofoutput="3" />
                                            <Link inputowner="6" indexofinput="4" outputowner="10" indexofoutput="3" />
                                            <Link inputowner="11" indexofinput="2" outputowner="6" indexofoutput="5" />
                                            <Link inputowner="8" indexofinput="2" outputowner="9" indexofoutput="4" />
                                            <Link inputowner="8" indexofinput="2" outputowner="11" indexofoutput="4" />
                                            <Link inputowner="9" indexofinput="2" outputowner="0" indexofoutput="1" />
                                            <Link inputowner="10" indexofinput="2" outputowner="0" indexofoutput="1" />
                                            <Link inputowner="0" indexofinput="4" outputowner="11" indexofoutput="5" />
                                        </Diagram>
                                    </BehaviorKeyframe>
                                </BehaviorLayer>
                                <ActuatorList model="">
                                    <ActuatorCurve name="value" actuator="HeadPitch" recordable="0" mute="0" unit="-1">
                                        <Key frame="15" value="0.524941" />
                                        <Key frame="30" value="0.524941" />
                                        <Key frame="45" value="0.524941" />
                                        <Key frame="60" value="0.524941" />
                                    </ActuatorCurve>
                                    <ActuatorCurve name="value" actuator="HeadYaw" recordable="0" mute="0" unit="-1">
                                        <Key frame="15" value="-0.441859" />
                                        <Key frame="30" value="-0.441859" />
                                        <Key frame="45" value="0.441859" />
                                        <Key frame="60" value="-0.441859" />
                                    </ActuatorCurve>
                                    <ActuatorCurve name="value" actuator="LAnklePitch" recordable="0" mute="0" unit="-1">
                                        <Key frame="15" value="-15.2956" />
                                        <Key frame="30" value="-0.00240423" />
                                        <Key frame="45" value="0.178186" />
                                        <Key frame="60" value="-0.00240423" />
                                    </ActuatorCurve>
                                    <ActuatorCurve name="value" actuator="LAnkleRoll" recordable="0" mute="0" unit="-1">
                                        <Key frame="15" value="8.61579" />
                                        <Key frame="30" value="-5.62267" />
                                        <Key frame="45" value="-21.448" />
                                        <Key frame="60" value="-5.62267" />
                                    </ActuatorCurve>
                                    <ActuatorCurve name="value" actuator="LElbowRoll" recordable="0" mute="0" unit="-1">
                                        <Key frame="15" value="-58.4456" />
                                        <Key frame="30" value="-2.37068" />
                                        <Key frame="45" value="-33.2255" />
                                        <Key frame="60" value="-2.37068" />
                                    </ActuatorCurve>
                                    <ActuatorCurve name="value" actuator="LElbowYaw" recordable="0" mute="0" unit="-1">
                                        <Key frame="15" value="-35.9501" />
                                        <Key frame="30" value="-90.6188" />
                                        <Key frame="45" value="32.6981" />
                                        <Key frame="60" value="-90.6188" />
                                    </ActuatorCurve>
                                    <ActuatorCurve name="value" actuator="LHand" recordable="0" mute="0" unit="1">
                                        <Key frame="15" value="0.234" />
                                        <Key frame="30" value="0.234" />
                                        <Key frame="45" value="0.2364" />
                                        <Key frame="60" value="0.234" />
                                    </ActuatorCurve>
                                    <ActuatorCurve name="value" actuator="LHipPitch" recordable="0" mute="0" unit="-1">
                                        <Key frame="15" value="-18.1033" />
                                        <Key frame="30" value="-0.43705" />
                                        <Key frame="45" value="0.524941" />
                                        <Key frame="60" value="-0.43705" />
                                    </ActuatorCurve>
                                    <ActuatorCurve name="value" actuator="LHipRoll" recordable="0" mute="0" unit="-1">
                                        <Key frame="15" value="-8.78677" />
                                        <Key frame="30" value="6.41851" />
                                        <Key frame="45" value="23.3768" />
                                        <Key frame="60" value="6.41851" />
                                    </ActuatorCurve>
                                    <ActuatorCurve name="value" actuator="LHipYawPitch" recordable="0" mute="0" unit="-1">
                                        <Key frame="15" value="-7.46839" />
                                        <Key frame="30" value="-6.85315" />
                                        <Key frame="45" value="-7.46839" />
                                        <Key frame="60" value="-6.85315" />
                                    </ActuatorCurve>
                                    <ActuatorCurve name="value" actuator="LKneePitch" recordable="0" mute="0" unit="-1">
                                        <Key frame="15" value="35.5059" />
                                        <Key frame="30" value="-0.0902951" />
                                        <Key frame="45" value="-0.173378" />
                                        <Key frame="60" value="-0.0902951" />
                                    </ActuatorCurve>
                                    <ActuatorCurve name="value" actuator="LShoulderPitch" recordable="0" mute="0" unit="-1">
                                        <Key frame="15" value="54.051" />
                                        <Key frame="30" value="86.3073" />
                                        <Key frame="45" value="118.92" />
                                        <Key frame="60" value="86.3073" />
                                    </ActuatorCurve>
                                    <ActuatorCurve name="value" actuator="LShoulderRoll" recordable="0" mute="0" unit="-1">
                                        <Key frame="15" value="1.14019" />
                                        <Key frame="30" value="31.8144" />
                                        <Key frame="45" value="2.81494" />
                                        <Key frame="60" value="31.8144" />
                                    </ActuatorCurve>
                                    <ActuatorCurve name="value" actuator="LWristYaw" recordable="0" mute="0" unit="0">
                                        <Key frame="15" value="-10.1978" />
                                        <Key frame="30" value="23.1131" />
                                        <Key frame="45" value="-23.6405" />
                                        <Key frame="60" value="23.1131" />
                                    </ActuatorCurve>
                                    <ActuatorCurve name="value" actuator="RAnklePitch" recordable="0" mute="0" unit="-1">
                                        <Key frame="15" value="0.178186" />
                                        <Key frame="30" value="-0.0854867" />
                                        <Key frame="45" value="-15.2956" />
                                        <Key frame="60" value="-0.0854867" />
                                    </ActuatorCurve>
                                    <ActuatorCurve name="value" actuator="RAnkleRoll" recordable="0" mute="0" unit="-1">
                                        <Key frame="15" value="21.448" />
                                        <Key frame="30" value="6.15482" />
                                        <Key frame="45" value="-8.61579" />
                                        <Key frame="60" value="6.15482" />
                                    </ActuatorCurve>
                                    <ActuatorCurve name="value" actuator="RElbowRoll" recordable="0" mute="0" unit="-1">
                                        <Key frame="15" value="33.2255" />
                                        <Key frame="30" value="3.60597" />
                                        <Key frame="45" value="58.4456" />
                                        <Key frame="60" value="3.60597" />
                                    </ActuatorCurve>
                                    <ActuatorCurve name="value" actuator="RElbowYaw" recordable="0" mute="0" unit="-1">
                                        <Key frame="15" value="-32.6981" />
                                        <Key frame="30" value="89.1198" />
                                        <Key frame="45" value="35.9501" />
                                        <Key frame="60" value="89.1198" />
                                    </ActuatorCurve>
                                    <ActuatorCurve name="value" actuator="RHand" recordable="0" mute="0" unit="1">
                                        <Key frame="15" value="0.2364" />
                                        <Key frame="30" value="0.2364" />
                                        <Key frame="45" value="0.234" />
                                        <Key frame="60" value="0.2364" />
                                    </ActuatorCurve>
                                    <ActuatorCurve name="value" actuator="RHipPitch" recordable="0" mute="0" unit="-1">
                                        <Key frame="15" value="0.524941" />
                                        <Key frame="30" value="0.43705" />
                                        <Key frame="45" value="-18.1033" />
                                        <Key frame="60" value="0.43705" />
                                    </ActuatorCurve>
                                    <ActuatorCurve name="value" actuator="RHipRoll" recordable="0" mute="0" unit="-1">
                                        <Key frame="15" value="-23.3768" />
                                        <Key frame="30" value="-5.97423" />
                                        <Key frame="45" value="8.78677" />
                                        <Key frame="60" value="-5.97423" />
                                    </ActuatorCurve>
                                    <ActuatorCurve name="value" actuator="RHipYawPitch" recordable="0" mute="0" unit="-1">
                                        <Key frame="15" value="-7.46839" />
                                        <Key frame="30" value="-6.85315" />
                                        <Key frame="45" value="-7.46839" />
                                        <Key frame="60" value="-6.85315" />
                                    </ActuatorCurve>
                                    <ActuatorCurve name="value" actuator="RKneePitch" recordable="0" mute="0" unit="-1">
                                        <Key frame="15" value="-0.173378" />
                                        <Key frame="30" value="-0.173378" />
                                        <Key frame="45" value="35.5059" />
                                        <Key frame="60" value="-0.173378" />
                                    </ActuatorCurve>
                                    <ActuatorCurve name="value" actuator="RShoulderPitch" recordable="0" mute="0" unit="-1">
                                        <Key frame="15" value="118.92" />
                                        <Key frame="30" value="85.4332" />
                                        <Key frame="45" value="54.051" />
                                        <Key frame="60" value="85.4332" />
                                    </ActuatorCurve>
                                    <ActuatorCurve name="value" actuator="RShoulderRoll" recordable="0" mute="0" unit="-1">
                                        <Key frame="15" value="-2.81494" />
                                        <Key frame="30" value="-43.4209" />
                                        <Key frame="45" value="-1.14019" />
                                        <Key frame="60" value="-43.4209" />
                                    </ActuatorCurve>
                                    <ActuatorCurve name="value" actuator="RWristYaw" recordable="0" mute="0" unit="0">
                                        <Key frame="15" value="23.6405" />
                                        <Key frame="30" value="14.5876" />
                                        <Key frame="45" value="10.1978" />
                                        <Key frame="60" value="14.5876" />
                                    </ActuatorCurve>
                                </ActuatorList>
                            </Timeline>
                        </Box>
                        <Link inputowner="3" indexofinput="2" outputowner="0" indexofoutput="2" />
                        <Link inputowner="0" indexofinput="4" outputowner="3" indexofoutput="4" />
                    </Diagram>
                </BehaviorKeyframe>
            </BehaviorLayer>
        </Timeline>
    </Box>
</ChoregrapheProject>
